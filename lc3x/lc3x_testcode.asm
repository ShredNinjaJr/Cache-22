
ORIGIN 4x0000


SEGMENT CodeSegment:
	LEA R0, DataSegment
	LDR R1, R0, IN_1
	LDR R2, R0, IN_2
	LDR R6, R0, Bad
	XOR R3, R1, R1
	BRnp HALT
	
XOR_TEST:
	LDR R6, R0, Bad
	XOR R3, R1, R2
	LDR R4, R0, XOR_RESULT
	JSR COMPARE

XNOR_TEST:
	LDR R6, R0, Bad
	XNOR R3, R1, R2
	LDR R4, R0, XNOR_RESULT
	JSR COMPARE
	
NAND_TEST:
	LDR R6, R0, Bad
	NAND R3, R1, R2
	LDR R4, R0, NAND_RESULT
	JSR COMPARE
	
OR_TEST:
	LDR R6, R0, Bad
	OR R3, R1, R2
	LDR R4, R0, OR_RESULT
	JSR COMPARE

NOR_TEST:
	LDR R6, R0, Bad
	NOR R3, R1, R2
	LDR R4, R0, NOR_RESULT
	JSR COMPARE

SUB_TEST_1:
	LDR R6, R0, Bad
	SUB R3, R1, R2
	LDR R4, R0, SUB_RESULT_2
	JSR COMPARE

SUB_TEST_2:
	LDR R6, R0, Bad
	SUB R3, R2, R1
	LDR R4, R0, SUB_RESULT_1
	JSR COMPARE

MULT_TEST_1:
	LDR R6, R0, Bad
	LDR R1, R0, POS_NUM
	LDR R2, R0, NEG_NUM
	
	MULT R3, R1, R2
	LDR R4, R0, MULT_RESULT_1
	JSR COMPARE
	
	
MULT_TEST_2:
	LDR R6, R0, Bad
	LDR R1, R0, POS_NUM
	LDR R2, R0, POS_NUM
	
	MULT R3, R1, R2
	LDR R4, R0, MULT_RESULT_2
	JSR COMPARE

MULT_TEST_3:
	LDR R6, R0, Bad
	LDR R1, R0, NEG_NUM
	LDR R2, R0, NEG_NUM
	
	MULT R3, R1, R2
	LDR R4, R0, MULT_RESULT_3
	JSR COMPARE

MULT_TEST_4:
	LDR R6, R0, Bad
	AND R1, R1, 0
	MULT R3, R1, R2
	BRnp HALT
	LDR R6, R0, Good

DIV_TEST_1:
	LDR R6, R0, Bad
	LDR R1, R0, POS_NUM_DIV
	LDR R2, R0, NEG_NUM_DIV
	DIV R3, R2, R1
	LDR R4, R0, DIV_RESULT_1
	JSR COMPARE

DIV_TEST_2:
	LDR R6, R0, Bad
	LDR R1, R0, POS_NUM_DIV
	LDR R2, R0, POS_NUM_DIV
	DIV R3, R2, R1
	LDR R4, R0, DIV_RESULT_2
	JSR COMPARE

DIV_TEST_3:
	LDR R6, R0, Bad
	LDR R1, R0, NEG_NUM_DIV
	LDR R2, R0, NEG_NUM_DIV
	DIV R3, R2, R1
	LDR R4, R0, DIV_RESULT_3
	JSR COMPARE

DIV_TEST_4:
	LDR R6, R0, Bad
	LDR R1, R0, NEG_NUM_DIV
	LDR R2, R0, POS_NUM_DIV
	DIV R3, R2, R1
	LDR R4, R0, DIV_RESULT_4
	JSR COMPARE

	BRnzp HALT

COMPARE: ; Compares Registers R4, R3. Loads 0x600D into R6 if R4 == R3. Clobbers R5
	NOT R5, R4
	ADD R5, R5, 1
	ADD R5, R3, R5
	BRnp HALT
	LDR R6, R0, Good
	RET	

HALT:
	BRnzp HALT


SEGMENT DataSegment:
	Bad: DATA2 4xBAAD
	Good: DATA2 4x600D

	IN_1: DATA2 4x42A2
	IN_2: DATA2 4x5692

	NEG_NUM: DATA2 4x00A4
	POS_NUM: DATA2 4x0012

	NEG_NUM_DIV: DATA2 4x72D4
	POS_NUM_DIV: DATA2 4x0012

	MULT_RESULT_1: DATA2 4xF988
	MULT_RESULT_2: DATA2 4x144
	MULT_RESULT_3: DATA2 4x2110

	DIV_RESULT_1: DATA2	4x0661
	DIV_RESULT_2: DATA2 4x0001
	DIV_RESULT_3: DATA2 4x0001
	DIV_RESULT_4: DATA2 4x0000
	
	XOR_RESULT: DATA2 4x1430
	XNOR_RESULT: DATA2 4xEBCF
	NAND_RESULT: DATA2 4xBD7D
	SUB_RESULT_1: DATA2 4x13F0
	SUB_RESULT_2: DATA2 4xEC10
	
	OR_RESULT: DATA2 4x56B2
	NOR_RESULT: DATA2 4xA94D


